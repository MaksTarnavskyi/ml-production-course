# This is a basic workflow to help you get started with Actions

name: CI

env:
  IMAGE_ML_WEB: simple-app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: 
      - 'main'
    tags:
      - 'week*'
    paths:
      - ./week1/
  pull_request:
    branches: 
      - 'main'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-push-flask-app:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout 
        uses: actions/checkout@v2
      
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      -
        name: Build and push simple web-app
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: week1/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_ML_WEB }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_ML_WEB }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_ML_WEB }}:buildcache,mode=max


  k8s_local_test_with_minikube:

    runs-on: ubuntu-latest
    name: build example and deploy to minikube

    steps:
    - uses: actions/checkout@v2
    - name: Start minikube
      uses: medyagh/setup-minikube@master

    - name: Get pods
      run: kubectl get pods -A

    - name: Deploy application
      run: |
        kubectl create -f week1/k8s-resources/deployment-flask-app.yaml
        kubectl create -f week1/k8s-resources/service-flask-app.yaml
        kubectl wait --for=condition=complete --timeout=300s job/deployment-flask
        kubectl get pods -A


    
    # - name: Deploy job to minikube
    #   run: |
    #     kubectl create -f week-1/k8s-resources/job-app-ml.yaml 
    #     kubectl wait --for=condition=complete --timeout=300s job/job-app-ml
    #     kubectl get pod
    # - name: Deploy app to minikube
    #   run: |
    #     # kubectl create -f week-1/k8s-resources/deployment-app-web.yaml
    #     kubectl get pod 