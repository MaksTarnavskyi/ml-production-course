# This is a basic workflow to help you get started with Actions

name: CI-WEEK-2

env:
  IMAGE_MAIN_NAME: task-data-formats
  IMAGE_MAIN_TAG: latest

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: 
      - 'main'
      - 'week2-minio'
      - 'week2-compare-data-formats'
      - 'week2-lakefs'
    paths:
      - ./week2/

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  minio-deploy:

    runs-on: ubuntu-latest
    name: deploy minio to minikube

    steps:
    - uses: actions/checkout@v2
    - name: Start minikube
      uses: medyagh/setup-minikube@master

    - name: Get pods
      run: kubectl get pods -A
    
    - name: Deploy minio to minikube
      run: |
        kubectl create -f week2/minio/k8s/minio-pvc.yaml
        kubectl create -f week2/minio/k8s/minio-deployment.yaml
        kubectl create -f week2/minio/k8s/minio-service.yaml

        kubectl wait deployment -n default minio-deployment --for condition=Available=True --timeout=90s

        kubectl port-forward svc/minio-api 9000:9000 &
        kubectl get pods -A

    - name: Install Python dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: "week2/minio/requirements.txt"

    - name: Run tests
      run: python -m pytest --cov=week2/minio/tests week2/minio/tests/

  task-data-formats:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout 
        uses: actions/checkout@v2

      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1


      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: week2/task-data-formats/
          file: week2/task-data-formats/Dockerfile
          push: false
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_MAIN_NAME }}:${{ env.IMAGE_MAIN_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_MAIN_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_MAIN_NAME }}:buildcache,mode=max

      - name: Build new
        run: |
          docker build -t maksymtarnavskyi/task-data-formats week2/task-data-formats
      - name: Run task compare data formats
        run: |
          docker run -i maksymtarnavskyi/task-data-formats:latest
      - name: Push
        uses: docker/build-push-action@v2
        with:
          context: week2/task-data-formats/
          file: week2/task-data-formats/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_MAIN_NAME }}:${{ env.IMAGE_MAIN_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_MAIN_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_MAIN_NAME }}:buildcache,mode=max

  lakefs-deploy:

    runs-on: ubuntu-latest
    name: deploy lakefs to minikube

    steps:
    - uses: actions/checkout@v2
    - name: Start minikube
      uses: medyagh/setup-minikube@master

    - name: Get pods
      run: kubectl get pods -A

    - name: Deploy lakefs to minikube
      run: |
        kubectl create -f week2/try-lakefs/k8s/lakefs-deploy.yaml
        kubectl wait deployment -n default my-lakefs --for condition=Available=True --timeout=90s
        kubectl port-forward svc/my-lakefs 5000:80 &
        kubectl get pods -A
    - name: Install Python dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: "week2/try-lakefs/requirements.txt"

  
